---
#
# Tasks to install OCP on OSP
#
# Flow:
# * Download/setup oc/kubectl client
# * Extract install binary (No build from source as version of golang is not installed on undercloud machines)
# * Setup cloud authentication
# * Install cluster
#

- name: Get scale_ci_deploy directory
  set_fact:
    scale_ci_deploy_diretory: "{{ lookup('env', 'dynamic_deploy_path') | default('{{ ansible_user_dir }}/scale-ci-deploy', true) }}"

- name: Create scale-ci-{{ openshift_cluster_name }}-{{ platform }} directories
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{ scale_ci_deploy_diretory }}/bin"
    - "{{ ansible_user_dir }}/.docker"

- name: Download oc client tools
  get_url:
    url: "{{openshift_client_location}}"
    dest: "{{ scale_ci_deploy_diretory }}/bin/{{openshift_client_location | basename}}"

- name: Untar and install oc client tools
  become: true
  shell: |
    set -o pipefail
    cd {{ scale_ci_deploy_diretory }}/bin
    tar xzf {{ openshift_client_location | basename }}
    cp oc /usr/local/bin/oc
    cp kubectl /usr/local/bin/kubectl

- name: Setup config for container registry
  template:
    src: registry_auth.j2
    dest: "{{ ansible_user_dir }}/.docker/config.json"

- name: Extract openshift-install binary from the payload
  shell: |
    set -o pipefail
    cd {{ scale_ci_deploy_diretory }}/bin
    oc adm release extract --tools {{openshift_install_release_image_override}}
    ls *.tar.gz | xargs -I % sh -c 'tar -xvf %'
    chmod +x openshift-install
  when: openshift_install_binary_url == ""

- name: Get OpenStack auth url
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    openstack endpoint list --service keystone --interface public --format value -c URL
  register: os_auth_url

- name: Get OpenStack username
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    echo "${OS_USERNAME}"
  register: os_username

- name: Get OpenStack password
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    echo "${OS_PASSWORD}"
  register: os_password

- name: Get OpenStack user domain
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    openstack user show ${OS_USERNAME} --format value -c domain_id
  register: os_user_domain_name

- name: Get OpenStack project name
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    echo "${OS_PROJECT_NAME}"
  register: os_project_name

- name: Get OpenStack project domain name
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    echo "${OS_PROJECT_DOMAIN_NAME}"
  register: os_project_domain_name

- name: Get OpenStack project ID
  shell: |
    source {{ ansible_user_dir }}/overcloudrc
    openstack project show ${OS_PROJECT_NAME} --format value -c id
  register: os_project_id

- name: Create clouds.yml
  template:
    src: clouds.yml.j2
    dest: "{{ scale_ci_deploy_diretory }}/clouds.yml"

- name: Download image
  get_url:
    url: "{{openshift_image_location}}"
    dest: "{{ scale_ci_deploy_diretory }}/{{openshift_image_location | basename}}"
  when: openstack_upload_image|bool

- name: Converting qcow2 image to raw format
  shell: |
    qemu-img convert -f qcow2 -O raw {{ scale_ci_deploy_diretory }}/{{ (openshift_image_location | basename | splitext)[0] }}.raw
  when: openstack_upload_image|bool

- name: Upload image into glance
  shell: |
    . {{ ansible_user_dir }}/overcloudrc
    openstack image create --disk-format raw --container-format bare --file {{ scale_ci_deploy_diretory }}/{{ (openshift_image_location | basename | splitext)[0] }}.raw rhcos --format value -c id
  register: glance_image_id
  when: openstack_upload_image|bool

- name: Disable Overcloud admin quota
  shell: ". {{ ansible_user_dir }}/overcloudrc \n
    openstack quota set --properties -1 --server-groups -1 --ram -1 --key-pairs -1 --instances -1 --fixed-ips -1 --injected-file-size -1 --server-group-members -1
    --injected-files -1 --cores -1 --injected-path-size -1 --per-volume-gigabytes -1 --gigabytes -1 --backup-gigabytes -1 --snapshots -1 --volumes -1
    --backups -1 --subnetpools -1 --vips -1 --ports -1 --subnets -1 --networks -1 --floating-ips -1 --secgroup-rules -1 --secgroups -1 --routers -1
    --rbac-policies -1 admin"

- name: Create the flavors
  shell: |
    . {{ ansible_user_dir }}/overcloudrc
    openstack flavor create --ram {{ item['memory'] }} --disk {{ item['disk'] }} --vcpus {{ item['vcpu'] }} {{ item['name'] }} --format value -c id
    openstack flavor create --ram {{ item['memory'] }} --disk {{ item['disk'] }} --vcpus {{ item['vcpu'] }} --property "pci_passthrough:alias"="nvme:1" {{ item['name'] }}-pci --format value -c id
  with_items: "{{ ec2_flavors }}"
  when: openstack_create_flavors|bool
  ignore_errors: true

- name: Configure swift for temp-url
  shell: |
    . {{ ansible_user_dir }}/overcloudrc
    openstack role add --user {{os_username.stdout}} --project {{os_project_name.stdout}} swiftoperator
    openstack object store account set --property Temp-URL-Key=superkey

- name: Create FIP for API
  shell: |
    . {{ ansible_user_dir }}/overcloudrc
    openstack floating ip create public --format value -c floating_ip_address
  register: public_fip

- name: Setup orchestration machine /etc/hosts
  become: true
  lineinfile:
    path: /etc/hosts
    state: present
    insertafter: EOF
    line: "{{item.line}}"
    regexp: "{{item.regexp}}"
  with_items:
    - line: "{{public_fip.stdout}} api.{{openshift_cluster_name}}.{{openshift_base_domain}}"
      regexp: "[0-9]+/.[0-9]+/.[0-9]+/.[0-9]+ api/."
    - line: "{{public_fip.stdout}} console-openshift-console.apps.{{openshift_cluster_name}}.{{openshift_base_domain}}"
      regexp: "[0-9]+/.[0-9]+/.[0-9]+/.[0-9]+ console-openshift-console/.apps/."
    - line: "{{public_fip.stdout}} integrated-oauth-server-openshift-authentication.apps.{{openshift_cluster_name}}.{{openshift_base_domain}}"
      regexp: "[0-9]+/.[0-9]+/.[0-9]+/.[0-9]+ integrated-oauth-server-openshift-authentication/.apps/."
    - line: "{{public_fip.stdout}} oauth-openshift.apps.{{openshift_cluster_name}}.{{openshift_base_domain}}"
      regexp: "[0-9]+/.[0-9]+/.[0-9]+/.[0-9]+ oauth-openshift/.apps/."
    - line: "{{public_fip.stdout}} prometheus-k8s-openshift-monitoring.apps.{{openshift_cluster_name}}.{{openshift_base_domain}}"
      regexp: "[0-9]+/.[0-9]+/.[0-9]+/.[0-9]+ prometheus-k8s-openshift-monitoring/.apps/."
    - line: "{{public_fip.stdout}} grafana-openshift-monitoring.apps.{{openshift_cluster_name}}.{{openshift_base_domain}}"
      regexp: "[0-9]+/.[0-9]+/.[0-9]+/.[0-9]+ grafana-openshift-monitoring/.apps/."

- name: Read contents local ssh public key
  slurp:
    src: "{{openshift_install_ssh_pub_key_file}}"
  delegate_to: localhost
  register: install_ssh_pub_key

- name: Create Cluster UUID
  shell: |
    uuidgen --random
  register: cluster_uuid

- name: Setup install-config.yaml
  template:
    src: install-config.yaml.j2
    dest: "{{item}}"
  with_items:
    - "{{ scale_ci_deploy_diretory }}/install-config.yaml"

- block:
   - name: Fetch the openshift-install binary tarball
     get_url:
       url: "{{ openshift_install_binary_url }}"
       dest: "{{ scale_ci_deploy_diretory }}/bin/"

   - name: Extract openshift-install binary
     shell: |
       set -o pipefail
       cd {{ scale_ci_deploy_diretory }}/bin
       ls *.tar.gz | xargs -I % sh -c 'tar -xvf %'
       chmod +x openshift-install
  when: openshift_install_binary_url != ""

- name: Run openshift-install on OSP using the image override
  shell: |
    set -o pipefail
    cd {{ scale_ci_deploy_diretory }}
    export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ openshift_install_release_image_override }}
    export _OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ openshift_install_release_image_override }}
    export OS_CLIENT_CONFIG_FILE={{ scale_ci_deploy_diretory }}/clouds.yml
    bin/openshift-install create cluster --log-level=debug

- name: Create dir to store artifacts
  file:
    path: "{{ ansible_user_dir }}/scale-ci-osp-artifacts-{{ openshift_cluster_name }}"
    state: directory
  delegate_to: localhost

- name: Copy the install log to the artifacts dir
  fetch:
    src: "{{ scale_ci_deploy_diretory }}/.openshift_install.log"
    dest: "{{ playbook_dir }}/scale-ci-{{ openshift_cluster_name }}-{{ platform }}-artifacts/openshift_install.log"
    flat: yes

- name: Copy the kubeconfig to the artifacts dir
  fetch:
    src: "{{ scale_ci_deploy_diretory }}/auth/kubeconfig"
    dest: "{{ playbook_dir }}/scale-ci-{{ openshift_cluster_name }}-{{ platform }}-artifacts/kubeconfig" 
    flat: yes
