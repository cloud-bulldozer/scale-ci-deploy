---
#
# Tasks to install OCP on GCP
#
# Flow:
# * Setup directories and oc/kubectl client
# * Either extract install binary or build from source
# * Install cloud tools and authentication
# * Install cluster
#

- name: Create scale-ci-deploy directories
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{ansible_user_dir}}/scale-ci-deploy/"
    - "{{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp"
    - "{{ansible_user_dir}}/scale-ci-deploy/logs"
    - "{{ansible_user_dir}}/scale-ci-deploy/bin"
    - "{{ansible_user_dir}}/.docker"

- name: Download oc client tools
  get_url:
    url: "{{openshift_client_location}}"
    dest: "{{ansible_user_dir}}/scale-ci-deploy/{{openshift_client_location | basename}}"

- name: Untar and install oc client tools
  become: true
  shell: |
    set -o pipefail
    cd {{ansible_user_dir}}/scale-ci-deploy/
    tar xzf {{ansible_user_dir}}/scale-ci-deploy/{{openshift_client_location | basename}}
    cp {{ansible_user_dir}}/scale-ci-deploy/oc /usr/local/bin/oc
    cp {{ansible_user_dir}}/scale-ci-deploy/kubectl /usr/local/bin/kubectl

- name: Setup config for container registry
  template:
    src: registry_auth.j2
    dest: "{{ansible_user_dir}}/.docker/config.json"

- name: Setup google cloud sdk repo
  become: true
  copy:
    src: "{{ role_path }}/files/google-cloud-sdk.repo"
    dest: /etc/yum.repos.d/
    remote_src: false

- name: Install dependencies
  package:
    name: "{{ packages }}"
    state: latest
    lock_timeout: 180
  vars:
    packages:
      - google-cloud-sdk
      - golang
      - golang-bin
      - gcc
      - git
      - gcc-c++
      - python-pip
      - jq

- name: Use installer from a build
  block:
    - name: Extract openshift-install binary from the payload
      shell: |
        set -o pipefail
        cd {{ansible_user_dir}}/scale-ci-deploy/bin
        oc adm release extract --tools {{openshift_install_release_image_override}}
        find -name \*.tar.gz -exec tar -xvf {} \;
        chmod +x openshift-install
  when: not openshift_install_installer_from_source|bool and openshift_install_binary_url == ""

- name: Build installer from source
  block:
    - name: Create gopath dir
      file:
        path: "{{ gopath }}"
        state: directory

    - name: Set workdir
      set_fact:
        workdir: "{{ gopath }}/src/github.com/openshift/installer"

    - name: Cleanup installer code if it exists
      file:
        path: "{{ workdir }}"
        state: absent

    - name: Clone installer repo
      git:
        repo: 'https://github.com/openshift/installer.git'
        dest: "{{ workdir }}"
        version: "{{ openshift_install_installer_from_source_version }}"

    - name: Build installer binary
      shell: |
        cd {{ workdir }}
        hack/build.sh
      environment:
        GOPATH: "{{ gopath }}"

    - name: Copy installer into expected directory
      copy:
        src: "{{ workdir }}/bin/openshift-install"
        dest: "{{ansible_user_dir}}/scale-ci-deploy/bin/openshift-install"
        remote_src: true
        mode: 0744
  when: openshift_install_installer_from_source|bool

- name: Create .gcp dir
  file:
    path: "{{ ansible_user_dir }}/.gcp"
    state: directory

- name: Login GCP account via service account (For GCP CLI interactions) and set the default project
  shell: gcloud auth activate-service-account {{ gcp_service_account }} --key-file={{ gcp_auth_key_file }} --project={{ gcp_project }}

- name: Read contents of local ssh public key
  slurp:
    src: "{{openshift_install_ssh_pub_key_file}}"
  delegate_to: localhost
  register: install_ssh_pub_key

- name: Setup install-config.yaml
  template:
    src: install-config.yaml.j2
    dest: "{{item}}"
  with_items:
    - "{{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/install-config.yaml"
    - "{{ansible_user_dir}}/scale-ci-deploy/install-config_gcp.yaml"

- block:
   - name: Fetch the openshift-install binary tarball
     get_url:
       url: "{{ openshift_install_binary_url }}"
       dest: "{{ansible_user_dir}}/scale-ci-deploy/bin/"

   - name: Extract openshift-install binary
     shell: |
       set -o pipefail
       cd {{ansible_user_dir}}/scale-ci-deploy/bin
       ls *.tar.gz | xargs -I % sh -c 'tar -xvf %'
       chmod +x openshift-install
   - name: Run openshift installer on gcp using the provided binary
     shell: |
       set -o pipefail
       cd {{ansible_user_dir}}/scale-ci-deploy
       export GOOGLE_CREDENTIALS={{ gcp_auth_key_file }}
       bin/openshift-install create cluster --log-level=debug --dir={{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/
  when: openshift_install_binary_url != ""

- name: Run openshift-install on GCP using the image override
  shell: |
    set -o pipefail
    cd {{ansible_user_dir}}/scale-ci-deploy
    export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ openshift_install_release_image_override }}
    export _OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ openshift_install_release_image_override }}
    export GOOGLE_CREDENTIALS={{ gcp_auth_key_file }}
    bin/openshift-install create cluster --log-level=debug --dir={{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/
  when: openshift_install_release_image_override != "" and openshift_install_binary_url == ""

- name: Ensure that .kube dir exists
  become: "{{item.become}}"
  file:
    path: "{{item.path}}"
    state: directory
  with_items:
    - path: /root/.kube
      become: true
    - path: "{{ansible_user_dir}}/.kube"
      become: false

- name: Copy the kubeconfig to .kube directories
  become: "{{item.become}}"
  copy:
    src: "{{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/auth/kubeconfig"
    dest: "{{item.dest}}"
    remote_src: true
  with_items:
    - dest: /root/.kube/config
      become: true
    - dest: "{{ansible_user_dir}}/.kube/config"
      become: false

- name: Copy the install log to the root directory
  copy:
    src: "{{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/.openshift_install.log"
    dest: "{{ansible_user_dir}}/openshift-install.log"
    remote_src: yes

- name: Create dir to store artifacts
  file:
    path: "{{ playbook_dir }}/scale-ci-gcp-artifacts"
    state: directory
  delegate_to: localhost

- name: Copy the install log to the artifacts dir
  fetch:
    src: "{{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/.openshift_install.log"
    dest: "{{ playbook_dir }}/scale-ci-gcp-artifacts/openshift_install.log"
    flat: yes

- name: Copy the kubeconfig to the artifacts dir
  fetch:
    src: "{{ansible_user_dir}}/scale-ci-deploy/scale-ci-gcp/auth/kubeconfig"
    dest: "{{ playbook_dir }}/scale-ci-gcp-artifacts/kubeconfig"
    flat: yes
