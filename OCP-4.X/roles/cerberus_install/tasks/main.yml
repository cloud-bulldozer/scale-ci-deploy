---
- name: Get scale_ci_deploy directory
  set_fact:
    scale_ci_deploy_diretory: "{{ lookup('env', 'dynamic_deploy_path') | default('{{ ansible_user_dir }}/scale-ci-deploy', true) }}"

- name: Generate cerberus config file
  template:
    src: cerberus.j2
    dest: "{{ cerberus_config_path }}"

- name: Install podman
  yum:
    name: podman
    state: latest
  become: true

- name: Pull "{{ cerberus_image }}" image
  podman_image:
    name: "{{ cerberus_image }}"
    force: yes

- name: Check if cerberus is running
  shell: podman ps -a | grep cerberus | awk '{print $1;}'
  register: cerberus_containers
  ignore_errors: yes

- name: Delete containers associated with cerberus image
  shell: podman rm -f "{{ item }}"
  loop: "{{ cerberus_containers.stdout_lines }}"

- name: Run containerized version of "{{ cerberus_image }}"
  command: podman run --name=cerberus-{{ openshift_cluster_name }}-{{ platform }} --net=host -v "{{ scale_ci_deploy_diretory }}/auth/kubeconfig":/root/.kube/config:Z -v "{{ cerberus_config_path }}":/root/cerberus/config/config.yaml:Z -d "{{ cerberus_image }}"
  when: not slack_integration | bool

- name: Run containerized version of "{{ cerberus_image }}" with slack integration
  command: podman run --name=cerberus-{{ openshift_cluster_name }}-{{ platform }} --net=host -v "{{ scale_ci_deploy_diretory }}/auth/kubeconfig":/root/.kube/config:Z -v "{{ cerberus_config_path }}":/root/cerberus/config/config.yaml:Z --env SLACK_API_TOKEN="{{ slack_api_token }}" --env SLACK_CHANNEL="{{ slack_channel }}" -d "{{ cerberus_image }}"
  when: slack_integration | bool

- name: Pause for cerberus to finish the first iteration after which it exposes the go/no-go signal
  pause:
    minutes: 2
