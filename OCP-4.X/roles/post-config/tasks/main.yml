---
- name: Get cluster name
  shell: |
    {%raw%}oc get machineset -n openshift-machine-api -o=go-template='{{(index (index .items 0).metadata.labels {%endraw%} "{{RHCOS_METADATA_LABEL_PREFIX}}/cluster-api-cluster" {%raw%})}}'{%endraw%}
  register: rhcos_cluster_name

- name: add the controller label
  shell: oc label node --overwrite -l 'node-role.kubernetes.io/pbench=' role=controller

- block:
    - name: Get public ip of the controller node
      shell: oc get nodes -l node-role.kubernetes.io/pbench= -o wide | awk 'NR>1 {print $7}'
      register: controller_public_ip

    - name: add controller to group
      add_host:
        name: "{{ controller_public_ip.stdout }}"
        groups: controller

    - name: get VpcId
      shell: aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`Name`].Value|[0],State.Name,PrivateIpAddress,PublicIpAddress, PrivateDnsName, VpcId]' --output text | column -t | grep {{ rhcos_cluster_name.stdout }} | awk '{print $7}' | grep -v '^$' | sort -u
      register: vpc_id

    - name: get security groups
      shell: aws ec2 describe-security-groups --filters "Name=vpc-id,Values={{ vpc_id.stdout }}" --output json | jq .SecurityGroups[].GroupId
      register: security_groups

    - name: add inbound rule to allow traffic on 2022
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol tcp --port 2022 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    - name: add inbound rule to allow traffic on 22
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol tcp --port 22 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    - name: add inbound rule to allow traffic on 9090
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol tcp --port 9090 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    - name: add inbound rule to allow tcp traffic on port range 20000 to 20109
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol tcp --port 20000-20109 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    - name: add inbound rule to allow udp traffic on port range 20000 to 20109
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol udp --port 20000-20109 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    # Typically `net.ipv4.ip_local_port_range` is set to `32768 60999` in which uperf will pick a few random ports to send flags over.
    # Currently there is no method outside of sysctls to control those ports
    # See pbench issue #1238 - https://github.com/distributed-system-analysis/pbench/issues/1238
    - name: add inbound rule to allow tcp traffic on port range 32768 to 60999
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol tcp --port 32768-60999 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    - name: add inbound rule to allow udp traffic on port range 32768 to 60999
      shell: aws ec2 authorize-security-group-ingress --group-id {{ item }} --protocol udp --port 32768-60999 --cidr 0.0.0.0/0
      with_items:
        - "{{ security_groups.stdout_lines }}"
      ignore_errors: yes

    - name: ssh config for nodes
      template:
        src: ssh-config.j2
        dest: /root/.ssh/config

    - name: get the ocp nodes
      shell: oc get nodes | awk 'NR>1 {print $1}'
      register: ocp_nodes

    - name: start sshd on the core nodes
      shell: oc debug node/{{ item }} -- chroot /host /usr/bin/systemctl start sshd
      with_items:
        - "{{ ocp_nodes.stdout_lines }}"

    - name: enable sshd on core cluster
      shell: oc debug node/{{ item }} -- chroot /host /usr/bin/systemctl enable sshd
      with_items:
        - "{{ ocp_nodes.stdout_lines }}"

    - name: Get the kubeconfig off of the orchestration host
      fetch:
        src: "{{ GOPATH }}/src/github.com/openshift/installer/auth/kubeconfig"
        dest: "{{playbook_dir}}/kubeconfig"
        flat: true
      when:
        - KUBECONFIG_AUTH_DIR_PATH is undefined

  when: OPENSHIFT_INSTALL_PLATFORM == "aws"
