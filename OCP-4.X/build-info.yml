---
- hosts: orchestration
  become: true
  remote_user: "{{ orchestration_user }}"
  vars_files:
    - vars/build-info.yml
  tasks:
    - name: Fetch the build info content from the provided location
      uri:
        url: "{{ build_info_url }}"
        method: GET
        return_content: yes
        body_format: json
      register: build_info

    - block:
        - name: Dump the captured build info to a file
          copy:
            content: "{{ (build_info.content|from_json) }}"
            dest: "{{ build_info_destination }}/build_info.json"

        - name: Set payload info as fact
          set_fact:
            payload_info: "{{ (build_info.content|from_json).msg.pullSpec }}"

        - name: Filter and capture the payload to a file
          copy:
            content: "{{ payload_info }}"
            dest: "{{ build_info_destination }}/payload"
      when: umb_message_format| bool

    - block:
        - name: Filter and capture the payload to a file
          copy:
            content: "{{ build_info.content }}"
            dest: "{{ build_info_destination }}/payload"

        - name: Set payload info as fact
          set_fact:
            payload_info: "{{ build_info.content }}"
      when: not umb_message_format| bool

    - name: Check if the file with the info about the previous payload exists
      stat:
        path: "{{ build_info_destination }}/payload.previous"
      register: previous_payload_file
    
    - block:
        - name: Capture the previous payload
          slurp:
            src: "{{ build_info_destination }}/payload.previous"
          register: previous_payload

        - name: Capture the current payload
          slurp:
            src: "{{ build_info_destination }}/payload"
          register: current_payload

        - name: Compare the current payload captured from the UMB with previous payload and update the status file with PROCEED signal when they don't match
          copy:
            content: "PROCEED"
            dest: "{{ build_info_destination }}/build.status"
            force: yes
          when: previous_payload.content| b64decode| trim != current_payload.content| b64decode| trim

        - name: Compare the current payload captured from the UMB with previous payload and update the status with STOP signal when they match
          copy:
            content: "STOP"
            dest: "{{ build_info_destination }}/build.status"
            force: yes
          when: previous_payload.content| b64decode| trim == current_payload.content| b64decode| trim

        - name: Update the previous payload file with the current payload info for the next runs after comparing and setting the status file when they don't match
          copy:
            content: "{{ payload_info }}"
            dest: "{{ build_info_destination }}/payload.previous"
          when: previous_payload.content| b64decode| trim != current_payload.content| b64decode| trim
      when: previous_payload_file.stat.exists == True

    - block:
        - name: Update the build status file with Proceed signal when info about previous payload doesn't exist
          copy:
            content: "PROCEED"
            dest: "{{ build_info_destination }}/build.status"
            force: yes

        - name: Populate the previous payload info
          copy:
            content: "{{ payload_info }}"
            dest: "{{ build_info_destination }}/payload.previous"
      when: previous_payload_file.stat.exists == False

    - name: Check if the job status file exists
      stat:
        path: "{{ build_info_destination }}/job.status"
      register: job_status_file

    - block:
        - name: Capture the job status
          slurp:
            src: "{{ build_info_destination }}/job.status"
          register: job_status
 
        - name: Update the build status with STOP signal in case the job status is set to false which means that it failed and we want to investigate instead of rebuilding the cluster
          copy:
            content: "STOP"
            dest: "{{ build_info_destination }}/build.status"
            force: yes
          when: not job_status.content | b64decode | trim | bool
      when: job_status_file.stat.exists == True

    - name: check if the cluster is running
      shell: oc get clusterversion
      register: cluster_version
      ignore_errors: yes
      delegate_to: "{{ groups['cluster_host'][0] }}"

    - name: set cluster status as fact
      set_fact: 
        cluster_status: "{% if cluster_version.rc == 0 %}true{% else %}false{% endif %}"

    - name: update the cluster status
      copy:
        content: "{{ cluster_status }}"
        dest: "{{ build_info_destination }}/cluster.status"
        force: yes
